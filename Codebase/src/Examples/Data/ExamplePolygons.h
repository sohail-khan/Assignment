// Copyright eeGeo Ltd 2015, All Rights Reserved

#pragma once

#include "LatLongAltitude.h"
#include "IteratorHelpers.h"
#include <vector>

namespace Examples
{
    namespace Data
    {
        inline void FromLatLonFloats(std::vector<float>& points, std::vector<Eegeo::Space::LatLongAltitude>& out_outline)
        {
            out_outline.clear();
            out_outline.reserve(points.size()/2);
            for (int i=0; i<points.size(); i=i+2)
            {
                out_outline.push_back(Eegeo::Space::LatLongAltitude::FromDegrees(points[i], points[i+1], 0.f));
            }
        }
        
        inline void PopulateMultipleOutlinesFromLatLonFloats(const std::vector<float>& points, std::vector<std::vector<Eegeo::Space::LatLongAltitude> >& out_outlines)
        {
            std::vector<Eegeo::Space::LatLongAltitude> llaPoints;
            llaPoints.clear();
            llaPoints.reserve(points.size()/2);
            for (int i=0; i<points.size(); i=i+2)
            {
                llaPoints.push_back(Eegeo::Space::LatLongAltitude::FromDegrees(points.at(i), points.at(i+1), 0.f));
            }
            out_outlines.push_back(llaPoints);
        }
        
        inline void DundeeEast(std::vector<Eegeo::Space::LatLongAltitude>& out_outline)
        {
            const float polygon[] = {56.499815345795504f, -2.950943880801872f, 56.498841785226901f, -2.958958770101008f, 56.498399276963944f, -2.957033971328584f, 56.49638348837707f, -2.956880873759607f, 056.491091991418827f, -2.962181832090647f, 56.488446095951858f, -2.959862417837404f, 56.486856822431825f, -2.955427947574368f, 56.487131335453761f, -2.950673620662875f, 56.480335663102764f, -2.952885466017601f, 56.483037188042566f, -2.97465610400197f, 056.483665948423386f, -2.985484992047056f, 56.481466096896163f, -2.986220224423212f, 56.47795892045194f, -2.983911571078409f, 056.478048565949479f, -2.984952922447457f, 56.475165138938024f, -2.984879835120265f, 56.475147127452111f, -2.980460543624224f, 56.465106636186825f, -2.970786725400902f, 56.464157506364067f, -2.964254548456689f, 56.462671767408871f, -2.962720659738614f, 56.461703315739641f, -2.963984678937528f, 56.459512972898885f, -2.960962799257037f, 56.461883120027785f, -2.952561168807651f, 56.462676608908183f, -2.952540466115638f, 56.462320710783978f, -2.951032035797596f, 56.464312744801788f, -2.942291996765632f, 56.465648750410693f, -2.929300559218551f, 56.465421971528507f, -2.918244126714495f, 56.466482906954475f, -2.917167703864998f, 56.46758615891904f, -2.908621275963936f, 056.467594888927451f, -2.89381086225268f, 056.46837573207474f, -2.889916010334497f, 056.465213115665186f, -2.880612150359434f, 56.464342350537009f, -2.873516040238378f, 56.462485236381553f, -2.871603873946854f, 56.462117933665368f, -2.869790849541725f, 56.462814378949005f, -2.859191680967591f, 56.465408633563285f, -2.850645177383112f, 56.465448578956824f, -2.844136373913357f, 56.466070022951968f, -2.84364861922211f, 056.466610146263797f, -2.845080820809295f, 56.468462532775732f, -2.832202069810327f, 56.474675451079847f, -2.839373727410477f, 56.477909978833232f, -2.84571186931849f, 056.478518771011693f, -2.845486737938213f, 56.478940775606844f, -2.842627318065188f, 56.480684808944353f, -2.844049373165129f, 56.485092457215508f, -2.837560961180783f, 56.486900125043491f, -2.839334546459844f, 56.482436378580076f, -2.865179387849149f, 56.479814408831935f, -2.874910585577608f, 56.477770378234347f, -2.888723994321028f, 56.491374964177055f, -2.893030259910345f, 56.493733818871632f, -2.891097729339594f, 56.493203423256453f, -2.896503557269197f, 56.495095638875384f, -2.899221651129772f, 56.495933955168155f, -2.904533462007251f, 56.497804101512585f, -2.908158064192253f, 56.497539808872197f, -2.911988405612708f, 56.496385871158722f, -2.914473536893617f, 56.496550259561751f, -2.918377536434133f, 56.499352606602777f, -2.920158843605353f, 56.498150645876336f, -2.921631930531459f, 56.496071272395248f, -2.930120694303307f, 56.497047787746595f, -2.939521351710325f, 56.496483924681996f, -2.947203506446589f, 56.499687629225349f, -2.949311340099035f};
            std::vector<float> llaPoints = Eegeo::Helpers::makeVector(polygon);
            FromLatLonFloats(llaPoints, out_outline);
        }
        
        inline void DundeeWest(std::vector<Eegeo::Space::LatLongAltitude>& out_outline)
        {
            const float polygon[] = {56.49447421486785f, -2.958638951634645f, 56.49638348837707f, -2.956880873759607f, 56.498399276963944f, -2.957033971328584f, 56.499112798785312f, -2.959815161805314f, 56.500284356128489f, -2.959459688066235f, 56.500640918961686f, -2.961923422015822f, 56.500256696156576f, -2.968473232527978f, 56.49535597414463f, -2.96808528585952f, 56.494235434491721f, -2.96959973954537f, 56.495430452053377f, -2.975440188740912f, 56.494291543484174f, -2.980879775998251f, 56.496198004972186f, -2.983155903587967f, 56.495587715300857f, -2.987374625296215f, 56.496953694609033f, -2.993083984632554f, 56.498295674585712f, -2.995138101336556f, 56.498557326818982f, -3.000926205940569f, 56.497226279185519f, -3.001318371556244f, 56.499169643964535f, -3.005204986258668f, 56.499001215826944f, -3.012142120070204f, 56.497120702084949f, -3.012224853071912f, 56.497959622814193f, -3.015838611945081f, 56.497807748371891f, -3.020968981164446f, 56.495076892002878f, -3.02111251420638f, 56.494745706281748f, -3.022693141300967f, 56.490960223433362f, -3.021532500756769f, 56.487480149289667f, -3.024014959667095f, 56.486269741696454f, -3.022068831705802f, 56.486376984482703f, -3.029504333861372f, 56.485155188043692f, -3.030573800022429f, 56.48477604451719f, -3.029117852143596f, 56.478248135869741f, -3.028702135553774f, 56.47763164232898f, -3.031611472824231f, 56.478575422892945f, -3.058703947383566f, 56.476256470453478f, -3.057858458979879f, 56.474329408717132f, -3.059214013278588f, 56.473646587624145f, -3.055841055131161f, 56.471989164498595f, -3.054978178343961f, 56.469022343354936f, -3.0598917037818f, 56.464773692087675f, -3.062740312974706f, 56.461257777008242f, -3.054573819365991f, 56.459228239327544f, -3.053818210909367f, 56.458707116148481f, -3.052122650806335f, 56.443603728402039f, -3.033990517809913f, 56.444992203187077f, -3.032109246676226f, 56.444361541436997f, -3.032210510965721f, 56.446255420853838f, -3.019397910916652f, 56.446607311164456f, -3.009877026322438f, 56.448818285029567f, -3.011436196509421f, 56.44922217411866f, -3.014125347056655f, 56.448994468643505f, -3.018240012475097f, 56.447347579353526f, -3.024780527574774f, 56.447365335595727f, -3.028074164336179f, 56.44773271945413f, -3.028732934655289f, 56.447819406371678f, -3.024225438100567f, 56.448462518928508f, -3.027398092835435f, 56.448324399372233f, -3.023460425328842f, 56.449094783492953f, -3.020570655620382f, 56.451424375897382f, -3.030048007075445f, 56.45052330964694f, -3.022095091989949f, 56.449850238521066f, -3.022330095719511f, 56.449399095704194f, -2.994260020843183f, 56.450718637143432f, -2.992049108388225f, 56.450784159174297f, -2.998561454363356f, 56.451335033406927f, -2.998314660163647f, 56.451388445263696f, -2.98804952673794f, 56.454367971940641f, -2.972208329646779f, 56.459512934149735f, -2.960962775920311f, 56.461703315739641f, -2.963984678937528f, 56.462671767408871f, -2.962720659738614f, 56.464157506364067f, -2.964254548456689f, 56.465106636186825f, -2.970786725400902f, 56.475147127452111f, -2.980460543624224f, 56.475165138938024f, -2.984879835120265f, 56.478048565949479f, -2.984952922447457f, 56.47795892045194f, -2.983911571078409f, 56.481466096896163f, -2.986220224423212f, 56.483665948423386f, -2.985484992047056f, 56.483037188042566f, -2.97465610400197f, 56.480335663102764f, -2.952885466017601f, 56.487131335453761f, -2.950673620662875f, 56.48672877292401f, -2.954664760944017f, 56.488543910734428f, -2.959989948963163f, 56.491091991418827f, -2.962181832090647f};
            std::vector<float> llaPoints = Eegeo::Helpers::makeVector(polygon);
            FromLatLonFloats(llaPoints, out_outline);
        }
    }
}